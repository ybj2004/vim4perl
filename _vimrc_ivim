"        _
" __ _  (_)_ __ ___ _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|

"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer: MinJie Wang <wangminjiede@gmail.com>
" Version:2.0 
" Last Change: 2014/02/12

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""




"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"------------------------------------------------
" => General
"------------------------------------------------

set nocompatible " Get out of VI's compatible mode
filetype plugin indent on " Enable filetype
let mapleader=',' " Change the mapleader
let maplocalleader='\' " Change the maplocalleader
set timeoutlen=500 " Time to wait for a command

" Source the vimrc file after saving it
autocmd BufWritePost .vimrc source $MYVIMRC
" Fast edit the .vimrc file using ',x'
nnoremap <Leader>x :tabedit $MYVIMRC<CR>

set autoread " Set autoread when a file is changed outside
set autowrite " Write on make/shell commands
set hidden " Turn on hidden"

set history=1000 " Increase the lines of history
set clipboard+=unnamed " Yanks go on clipboard instead
set spell " Spell checking on
set modeline " Turn on modeline
set encoding=utf-8 " Set utf-8 encoding
set completeopt+=longest " Optimize auto complete
set completeopt-=preview " Optimize auto complete

set mousehide " Hide mouse after chars typed
set mouse=a " Mouse in all modes

set backup " Set backup
set undofile " Set undo

autocmd BufWinLeave *.* silent! mkview " Make Vim save view (state) (folds, cursor, etc)
autocmd BufWinEnter *.* silent! loadview " Make Vim load view (state) (folds, cursor, etc)

" No sound on errors
set noerrorbells
set novisualbell
set t_vb=

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""






"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"-------------------------------------------------
" => Platform Specific Configuration
"-------------------------------------------------
au GUIEnter * simalt ~x                   
set clipboard+=unnamed                    
set encoding=utf-8  
set fileencodings=utf-8,chinese,latin-1  
if has("win32")    
 set fileencoding=chinese    
else    
 set fileencoding=utf-8    
endif  
  
source $VIMRUNTIME/delmenu.vim    
source $VIMRUNTIME/menu.vim  
    
language messages zh_CN.utf-8  


" On Windows, also use '.vim' instead of 'vimfiles'
if has('win32') || has('win64')
    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
endif

set viewoptions+=slash,unix " Better Unix/Windows compatibility
set viewoptions-=options " in case of mapping change
set fileformats=unix,mac,dos " Auto detect the file formats

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""






"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"--------------------------------------------------
" => Plugin
"--------------------------------------------------

filetype off " Required!
let g:vundle_default_git_proto='git'
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" Let Vundle manage Vundle
Bundle 'gmarik/vundle'

" UI Additions
Bundle 'w0ng/vim-hybrid'
Bundle 'chriskempson/vim-tomorrow-theme'
Bundle 'altercation/vim-colors-solarized'
Bundle 'nanotech/jellybeans.vim'

if has("python") || has("python3")
    Bundle 'Lokaltog/powerline', {'rtp':'/powerline/bindings/vim'}
    let airline=0
else
    Bundle 'bling/vim-airline'
    let airline=1
endif
Bundle 'nathanaelkane/vim-indent-guides'
" Navigation
Bundle 'michaeljsmith/vim-indent-object'
Bundle 'zhaocai/GoldenView.Vim'
Bundle 'taglist.vim'
Bundle 'ctags.vim'

if executable('ctags')
    Bundle 'majutsushi/tagbar'
endif
Bundle 'scrooloose/nerdtree'
" Commands
Bundle 'godlygeek/tabular'
" Automatic Helper
Bundle 'Shougo/neocomplcache'
Bundle 'scrooloose/syntastic'
Bundle 'Raimondi/delimitMate'

" Language related
Bundle 'LaTeX-Box-Team/LaTeX-Box'
Bundle 'TxtBrowser'

" Others
Bundle 'perl-support.vim'
Bundle 'jcf/vim-latex'
Bundle 'gooselinux/perltidy'

filetype plugin indent on " Required!

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""





"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"-------------------------------------------------
" => Vim User Interface
"-------------------------------------------------

" Set title
set title
set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:p:h\")})%)%(\ %a%)\ -\ %{v:servername}

" Set tabline
set showtabline=2 " Always show tab line
" Set up tab labels
set guitablabel=%m%N:%t\[%{tabpagewinnr(v:lnum)}\]
set tabline=%!MyTabLine()
function! MyTabLine()
    let s=''
    let t=tabpagenr() " The index of current page
    let i=1
    while i<=tabpagenr('$') " From the first page
        let buflist=tabpagebuflist(i)
        let winnr=tabpagewinnr(i)
        let s.=(i==t?'%#TabLineSel#':'%#TabLine#')
        let s.='%'.i.'T'
        let s.=' '
        let bufnr=buflist[winnr - 1]
        let file=bufname(bufnr)
        let m=''
        if getbufvar(bufnr, "&modified")
            let m='[+]'
        endif
        if file=~'\/.'
            let file=substitute(file,'.*\/\ze.','','')
        endif
        if file==''
            let file='[No Name]'
        endif
        let s.=m
        let s.=i.':'
        let s.=file
        let s.='['.winnr.']'
        let s.=' '
        let i=i+1
    endwhile
    let s.='%T%#TabLineFill#%='
    let s.=(tabpagenr('$')>1?'%999XX':'X')
    return s
endfunction
" Set up tab tooltips with every buffer name
set guitabtooltip=%F

" Set status line
set laststatus=2 " Show the statusline
set noshowmode " Hide the default mode text
" Set the style of the status line
" Use powerline to modify the statuls line
if airline==1
    let g:airline_powerline_fonts=1
    let g:airline_section_b = '%{getcwd()}'
endif
" Only have cursorline in current window and in normal window
autocmd WinLeave * set nocursorline
autocmd WinEnter * set cursorline
auto InsertEnter * set nocursorline
auto InsertLeave * set cursorline
set wildmenu " Show list instead of just completing
set wildmode=list:longest,full " Use powerful wildmenu
set shortmess=at " Avoids 'hit enter'
set showcmd " Show cmd

set backspace=indent,eol,start " Make backspaces delete sensibly
set whichwrap+=h,l,<,>,[,] " Backspace and cursor keys wrap to
set virtualedit=block,onemore " Allow for cursor beyond last character
set scrolljump=5 " Lines to scroll when cursor leaves screen
set scrolloff=3 " Minimum lines to keep above and below cursor
set sidescroll=1 " Minimal number of columns to scroll horizontally
set sidescrolloff=10 " Minimal number of screen columns to keep away from cursor

set showmatch " Show matching brackets/parenthesis
set matchtime=2 " Decrease the time to blink
set number " Show line numbers

set formatoptions+=rnlmM " Optimize format options
set wrap " Set wrap
set textwidth=80 " Change text width
set colorcolumn=+1 " Indicate text border
set list " Show these tabs and spaces and so on
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Change listchars
set linebreak " Wrap long lines at a blank
set showbreak=↪  " Change wrap line break
set fillchars=diff:⣿,vert:│ " Change fillchars
" Only show trailing whitespace when not in insert mode
augroup trailing
    autocmd!
    autocmd InsertEnter * :set listchars-=trail:⌴
    autocmd InsertLeave * :set listchars+=trail:⌴
augroup END
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""





""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"-------------------------------------------------
" => Colors and Fonts
"-------------------------------------------------

syntax on " Enable syntax
set background=dark " Set background
if !has('gui_running')
    set t_Co=256 " Use 256 colors
endif
colorscheme hybrid " Load a colorscheme

nnoremap <silent>\t :colorscheme Tomorrow-Night-Eighties<CR>
nnoremap <silent>\j :colorscheme jellybeans<CR>
nnoremap <silent>\h :colorscheme hybrid<CR>
if has('gui_running')
    nnoremap <silent>\t :colorscheme Tomorrow-Night<CR>
    nnoremap <silent>\s :colorscheme solarized<CR>
endif

if has('gui_running')
    if has('gui_gtk')
        set guifont=DejaVu\ Sans\ Mono\ 11
    elseif has('gui_macvim')
        set guifont=Monaco:h11
    elseif has('gui_win32')
        set guifont=Consolas:h14:cANSI
    endif
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""





"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"-------------------------------------------------
" => Indent and Tab Related
"-------------------------------------------------

set autoindent " Preserve current indent on new lines
set cindent " set C style indent
set expandtab " Convert all tabs typed to spaces
set softtabstop=4 " Indentation levels every four columns
set shiftwidth=4 " Indent/outdent by four columns
set shiftround " Indent/outdent to nearest tabstop
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""





""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"-------------------------------------------------
" => Search Related
"-------------------------------------------------

set ignorecase " Case insensitive search
set smartcase " Case sensitive when uc present
set hlsearch " Highlight search terms
set incsearch " Find as you type searchv
set gdefault " turn on 'g' flag


" Use ,Space to toggle the highlight search
nnoremap <Leader><Space> :set hlsearch!<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""





""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"-------------------------------------------------
" => Fold Related
"-------------------------------------------------

set foldlevelstart=0 " Start with all folds closed
set foldcolumn=1 " Set fold column

" Space to toggle and create folds.
nnoremap <silent><Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" Set foldtext
function! MyFoldText()
    let line=getline(v:foldstart)
    let nucolwidth=&foldcolumn+&number*&numberwidth
    let windowwidth=winwidth(0)-nucolwidth-3
    let foldedlinecount=v:foldend-v:foldstart+1
    let onetab=strpart('          ', 0, &tabstop)
    let line=substitute(line, '\t', onetab, 'g')
    let line=strpart(line, 0, windowwidth-2-len(foldedlinecount))
    let fillcharcount=windowwidth-len(line)-len(foldedlinecount)
    return line.'…'.repeat(" ",fillcharcount).foldedlinecount.'…'.' '
endfunction
set foldtext=MyFoldText()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""





""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"-------------------------------------------------
" => Key Mapping
"-------------------------------------------------

" Map \<Space> to commenting
function! IsWhiteLine()
    if (getline(".")=~"^$")
        let oldlinenumber=line(".")
        :call NERDComment('n', 'Sexy')
        if (line(".")==oldlinenumber)
            :call NERDComment('n', 'Append')
        else
            normal! k
            startinsert!
        endif
    else
        normal! A 
        :call NERDComment('n', 'Append')
    endif
endfunction
nnoremap <silent>\<Space> :call IsWhiteLine()<CR>

" Strip all trailing whitespace in the current file
nnoremap <Leader>q :%s/\s\+$//<CR>:let @/=''<CR>

" Modify all the indents
nnoremap \= gg=G

" See the differences between the current buffer and the file it was loaded from
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_
            \ | diffthis | wincmd p | diffthis

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""





""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------
" => Tagbar
"--------------------------------------------------

nnoremap <Leader>t :TagbarToggle<CR>
let g:tagbar_autofocus=1
let g:tagbar_expand=1
let g:tagbar_foldlevel=2
let g:tagbar_ironchars=['▾', '▸']
let g:tagbar_autoshowtag=1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""





""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------
" => NERD_tree
"--------------------------------------------------
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd VimEnter * NERDTree     
nnoremap <Leader>d :NERDTreeToggle<CR>
nnoremap <Leader>f :NERDTreeFind<CR>
let NERDTreeChDirMode=2
let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
let NERDTreeDirArrows=1
let g:nerdtree_tabs_open_on_gui_startup=0





"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"--------------------txt---------------------------------

 ""=> TxtBrowser {{{
               au BufRead,BufNewFile *.txt setlocal ft=txt
"               "}}}
"-------------------------------------------------------
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"--------------------------------------------------
"--------------------------------------------------
"=>"minibufferexpl"{{{
                let g:miniBufExplMapWindowNavVim = 1
                let g:miniBufExplMapWindowNavArrows = 1
                let g:miniBufExplMapCTabSwitchBufs = 1
                let g:miniBufExplModSelTarget = 1
                let g:miniBufExplCycleArround=1
                nnoremap <TAB> :MBEbn<CR>
                noremap <leader>bn :MBEbn<CR>
                noremap <leader>bp :MBEbp<CR>
                noremap <leader>bd :MBEbd<CR>
                ""}}}
"--------------------------------------------------
"--------------------------------------------------




"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"=> Taglist {{{
                set tags=tags;
                set autochdir
                let Tlist_Auto_Open = 0                 
                let Tlist_Use_Right_Window = 1         
                let Tlist_Compart_Format = 1            
                let Tlist_Exit_OnlyWindow = 1          
                let Tlist_Inc_Winwidth = 1              
                let Tlist_File_Fold_Auto_Close =1      
                let Tlist_Show_One_File = 1          
                let Tlist_WinWidth = 30                 
                let Tlist_Show_Menu = 1                
                let Tlist_Enable_Fold_Column = 0       
                let Tlist_Process_File_Always=0          
                nnoremap <silent> <F8> :TlistToggle<CR>

"  LaTex can also use Taglist http://vim.wikia.com/wiki/Use_Taglist_with_LaTeX_files
"let s:tlist_def_tex_settings = 'tex;s:section;c:chapter;l:label;r:ref'
"let s:tlist_def_tex_settings = 'tex;c:chapters;s:sections;u:subsections;b:subsubsections;l:label;r:ref'

" Tex language 
 let g:tlist_tex_settings = 'tex;c:chapters;s:sections;u:subsections;b:subsubsections;l:label;r:ref'
" let g:tlist_tex_settings = 'tex;c:chapters;s:sections;u:subsections;b:subsubsections' 
" let tlist_tex_settings   = 'latex;s:sections;g:graphics;l:labels'
" let tlist_make_settings  = 'make;m:makros;t:targets'

                ""}}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"--------------------------------------------------
" => delimitMate
"--------------------------------------------------
let delimitMate_expand_cr=1
let delimitMate_expand_space=1
let delimitMate_balance_matchpairs=1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"--------------------------------------------------
" => Syntastic
"--------------------------------------------------

                " Don't run Syntastic on opening files
                let g:syntastic_check_on_open = 1
                " Print error message for current line to command window
                let g:syntastic_echo_current_error = 1
                " Use the :sign interface to show errors
                let g:syntastic_enable_signs = 1
                " Use these symbols for errors, warnings, and style errors/warnings
                let g:syntastic_error_symbol = '>>'
                let g:syntastic_warning_symbol = '>'
                let g:syntastic_stl_format='[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
                " Don't use balloons
                let g:syntastic_enable_balloons = 0
                " Don't use syntax highlighting
                let g:syntastic_enable_highlighting = 1
                " automatically jump to the first error when first opening a file
                let g:syntastic_auto_jump = 1
                " Always use location list for errors
                let g:syntastic_always_populate_loc_list = 1
                " Automatically close location list when no more errors are found
                let g:syntastic_auto_loc_list = 2
                " Error list height = command window height
                let g:syntastic_loc_list_height = 5
                " Don't automatically check
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"--------------------------------------------------
" => Indent Guides
"--------------------------------------------------

if !has('gui_running')
    let g:indent_guides_auto_colors=0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=237
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=239
endif

let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""





"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" =>  Tabular {{{
                    nmap <Leader>a= :Tabularize /=<CR>
                    vmap <Leader>a= :Tabularize /=<CR>
                    nmap <Leader>a: :Tabularize /:\zs<CR>
                    vmap <Leader>a: :Tabularize /:\zs<CR>
                 " }}}
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""







""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"--------------------------------------------------
" => GoldenView
"--------------------------------------------------

let g:goldenview__enable_default_mapping=0
nmap <silent> <C-O> <Plug>GoldenViewSplit
nmap <silent> <C-G> <Plug>GoldenViewSwitchToggle
nmap <silent> <C-H> <Plug>GoldenViewNext
nmap <silent> <C-L> <Plug>GoldenViewPrevious

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""





"""""""""""""""""""""""perltidy"""""""""""""""""""""""""""""""""""""""""""""""""
"=> perltidy {{{
            nnoremap ,pt :%!perltidy -t -nola<CR>
            vnoremap ,pt :!perltidy -t -nola<CR>
            """}}}

"" comment perl code by #, choose a block code,  then cm
vmap cm :s/\(.*\)/#\1/<CR>:noh<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""latex""""""""""""""""""""""""""""""""""""""""""""""
" => vim-latex {{{
"
" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
set shellslash

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse latex-suite. Set your grep
" program to alway generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: This enables automatic indentation as you type.
"filetype indent on

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'


let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_ViewRule_pdf = 'SumatraPDF -reuse-instance -inverse-search "gvim -c \":RemoteOpen +\%l \%f\""'


""/*pdflatex*/
"let g:Tex_CompileRule_pdf = 'pdflatex --synctex=-1 -src-specials -interaction=nonstopmode $*'

""/*xelatex*/
let g:Tex_CompileRule_pdf = 'xelatex --synctex=-1 -src-specials -interaction=nonstopmode $*'

"TexLet g:Tex_CompileRule_pdf = 'xelatex -interaction=nonstopmode $*' "/*用xelatex进行编译*/
"
" Mutiple compile
"let g:Tex_MultipleCompileFormats = 'dvi,pdf'
"
let g:Tex_GotoError=0
            """}}}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


